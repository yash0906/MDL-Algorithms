import random
import json
import requests
import numpy as np
import time
def create_individual():
	x = []
	for i in range(11):
		x.append(round(random.uniform(-10,10),17))
	return x
f = open('data10.txt','w') 
gbl = []
API_ENDPOINT = 'http://10.4.21.147'
PORT = 3000
MAX_DEG = 11

#### functions that you can call
def get_errors(id, vector):
    """
    returns python array of length 2 
    (train error and validation error)
    """
    for i in vector: assert -10<=abs(i)<=10
    assert len(vector) == MAX_DEG

    return json.loads(send_request(id, vector, 'geterrors'))

def submit(id, vector):
    """
    used to make official submission of your weight vector
    returns string "successfully submitted" if properly submitted.
    """
    for i in vector: assert -10<=abs(i)<=10
    assert len(vector) == MAX_DEG
    return send_request(id, vector, 'submit')

#### utility functions
def urljoin(root, port, path=''):
    root = root + ':' + str(port)
    if path: root = '/'.join([root.rstrip('/'), path.rstrip('/')])
    return root

def send_request(id, vector, path):
    api = urljoin(API_ENDPOINT, PORT, path)
    vector = json.dumps(vector)
    response = requests.post(api, data={'id':id, 'vector':vector}).text
    if "reported" in response:
        print(response)
        exit()

    return response


class Individual(object):

	def __init__(self,chromo):
		self.chromo = chromo
		self.fitness = self.calc_fitness()
		self.fit_diff = abs(self.fitness[0] - self.fitness[1])
		self.fit_sum = self.fitness[0] + self.fitness[1]

	def calc_fitness(self):
		# err = get_errors('3a1bPcaPVlB2IaaIobK7p1oDI8GTMwxcXET6VNPD3Rv5UAeaOp', self.chromo)
		# err = get_errors('3a1bPcaPVlB2IaaIobK7p1oDI8GTMwxcXET6VNPD3Rv5UAeaOp', self.chromo)
		# err = get_errors('UNmhf3Kv18sOotABqtxAA5wNtrF7ov2Hl4mRkWjgM0o2OfEw71',self.chromo)
		err = get_errors('XFGOnLuRTtxEjaw7e10RYNKMyUqnsGOhLR1cmS2m922OW3MIdN',self.chromo)  
		# err = get_errors('EdQPhzkQ1CnpQ9jxCY4AH8eATTHeZm4IwEs2P1jE2xT3p8sCeE', self.chromo)
		assert len(err) == 2
		# f.write(str(self.chromo))
		# f.write(str(err))
		# f.write(str(err[0]+err[1]))
		if (err[0]+err[1]) < 10**6 + 200000 or abs(err[0]-err[1])<5000:
			f.write(str(self.chromo))
			f.write(str(err)) 
		# print(self.chromo)
		# print(err)
		# print(abs(err[0]-err[1]))
		# print("\033[93m" + "Total: " + str(err[0]+err[1]) + "\033[00m")
		# time.sleep(0.5)
		return err

	def mate(self,param):
		child_chromo = []
		k = random.randint(1,11)
		for i in range(0,k):
			child_chromo.append(self.chromo[i])
		for i in range(k,11):
			child_chromo.append(param.chromo[i])
		# for i in range(11):
		# 	prob = random.random()
		# 	if prob<0.5:
		# 		child_chromo.append(self.chromo[i])
		# 	else:
		# 		child_chromo.append(param.chromo[i])
		k = random.randint(1,11)
		g = child_chromo[k-1]
		if g>0:
			child_chromo[k-1] = (random.uniform(g-g/5,min(10,g+g/5)))
		else:
			child_chromo[k-1] = (random.uniform(max(-10,g/5+g),g-g/5))  
		# for i in range(11):
		# 	prob  = random.random()
		# 	if prob<0.2:
		# 		# bit = random.randint(0,10)
		# 		# g = child_chromo[i]
		# 		child_chromo[i]-=10**-12
		# 		# if g>0:
		# 		# 	child_chromo[i] = (random.uniform(g-g/100,min(10,g+g/100)))
		# 		# else:
		# 		# 	child_chromo[i] = (random.uniform(max(-10,g/100+g),g-g/100))
		return Individual(child_chromo)
		# for g1,g2 in zip(self.chromo,param.chromo):
		# 	prob = random.random()

		# 	if prob < 0.42:
		# 		child_chromo.append(g1)
		# 	elif prob < .85:
		# 		child_chromo.append(g2)
		# 	else:
		# 		# child_chromo.append((g1+g2)/2)
		# 		prob = random.random()
		# 		if prob<0.5:
		# 			if g1>0:
		# 				child_chromo.append(random.uniform(g1-g1/30,min(10,g1+g1/30)))
		# 			else:
		# 				child_chromo.append(random.uniform(max(-10,g1/30+g1),g1-g1/30))
		# 		else:
		# 			if g2>0:
		# 				child_chromo.append(random.uniform(g2-g2/30,min(10,g2+g2/30)))
		# 			else:
		# 				child_chromo.append(random.uniform(max(-10,g2/30+g2),g2-g2/30))
		# 			# child_chromo.append(g2+10**-14)
		# return Individual(child_chromo)


overfit = [0.0, 0.1240317450077846, -6.211941063144333, 0.04933903144709126, 0.03810848157715883, 8.132366097133624e-05, -6.018769160916912e-05, -1.251585565299179e-07, 3.484096383229681e-08, 4.1614924993407104e-11, -6.732420176902565e-12]
# for i in range(population_size):
# 	pop = []
# 	for j in overfit:
# 		prob = random.random()
# 		if prob < 0.33:
# 			pop.append(j+10**-12)
# 		elif prob < 0.66:
# 			pop.append(j-10**-12)
# 		else:
# 			pop.append(j)
	# population.append(Individual(pop))
# qwe = [[-9.3016e-13, 0.1240317450085504, -6.211941063144903, 0.04933903144609126, 0.03810848157659541, 8.132366197134e-05, -6.018769067655e-05, -1.2515864173e-07, 3.48417768e-08, 4.161492e-11, -6.72785e-12],[-9.3016e-13, 0.12403174500833515, -6.211941063143897, 0.04933903144609126, 0.03810848157615883, 8.132366197134e-05, -6.018769067655e-05, -1.2515955653e-07, 3.484180435e-08, 4.161492e-11, -6.73178e-12],[-9.3016e-13, 0.1240317450085504, -6.211941063143897, 0.04933903144609126, 0.03810848157659541, 8.132366197134e-05, -6.018769065418e-05, -1.2515955653e-07, 3.484182972e-08, 4.161492e-11, -6.72415e-12],[-9.3016e-13, 0.1240317450085504, -6.211941063144903, 0.04933903144609211, 0.03810848157659541, 8.132366197134e-05, -6.01876906505e-05, -1.2515865042e-07, 3.484183161e-08, 4.161492e-11, -6.72643e-12],[-9.3016e-13, 0.1240317450085504, -6.211941063143897, 0.04933903144609126, 0.03810848157639738, 8.132366197134e-05, -6.018769067655e-05, -1.251595565299179e-07, 3.484169732e-08, 4.161492e-11, -6.72643e-12],[-9.3854e-13, 0.1240317450085504, -6.211941063143897, 0.04933903144610944, 0.03810848157639738, 8.132366197134e-05, -6.018769067655e-05, -1.2515955653e-07, 3.484183161e-08, 4.161492e-11, -6.72415e-12],[-9.3016e-13, 0.1240317450085504, -6.211941063144903, 0.04933903144609126, 0.03810848157659541, 8.132366197134e-05, -6.01876906505e-05, -1.2515955653e-07, 3.484182972e-08, 4.161492e-11, -6.72415e-12],[-1e-12, 0.12403174500833515, -6.211941063144903, 0.04933903144609166, 0.03810848157659541, 8.132366197134e-05, -6.018769067655e-05, -1.2515865042e-07, 3.4841738e-08, 4.161492e-11, -6.72643e-12],[-9.3016e-13, 0.1240317450085504, -6.211941063143897, 0.04933903144609211, 0.03810848157659541, 8.132366197134e-05, -6.018769067626e-05, -1.2515955653e-07, 3.484182972e-08, 4.161492e-11, -6.72643e-12],[-9.497e-13, 0.1240317450085504, -6.211941063143897, 0.04933903144609126, 0.03810848157615883, 8.132366197134e-05, -6.018769067526e-05, -1.251595565299179e-07, 3.484183161e-08, 4.161492e-11, -6.72953e-12],[-1e-12, 0.12403174500833515, -6.211941063143897, 0.04933903144609126, 0.03810848157653792, 8.132366197134e-05, -6.018769067655e-05, -1.251595565299179e-07, 3.484180435e-08, 4.1614924993407104e-11, -6.72953e-12],[-9.3016e-13, 0.12403174500833515, -6.211941063143897, 0.04933903144609126, 0.03810848157615883, 8.132366197134e-05, -6.018769067655e-05, -1.2515955653e-07, 3.484180435e-08, 4.1614924993407104e-11, -6.73178e-12],[-1e-12, 0.12403174500833515, -6.211941063144903, 0.04933903144609126, 0.03810848157659541, 8.132366197134e-05, -6.018769067655e-05, -1.2515865042e-07, 3.48417768e-08, 4.1614924993407104e-11, -6.73178e-12],[-9.4331e-13, 0.12403174500833515, -6.211941063144903, 0.04933903144609126, 0.03810848157646623, 8.132366197134e-05, -6.018769067655e-05, -1.251595565299179e-07, 3.484169732e-08, 4.161492e-11, -6.72648e-12],[-9.3016e-13, 0.1240317450085504, -6.211941063144903, 0.04933903144609126, 0.03810848157659541, 8.132366197134e-05, -6.018769067655e-05, -1.251595565299179e-07, 3.484177312e-08, 4.161492e-11, -6.72828e-12],[-9.3016e-13, 0.1240317450085504, -6.211941063143897, 0.04933903144609171, 0.03810848157659541, 8.132366197134e-05, -6.018769067655e-05, -1.2515874188e-07, 3.484183161e-08, 4.161492e-11, -6.72902e-12],[-9.5863e-13, 0.1240317450085504, -6.211941063144387, 0.04933903144609211, 0.03810848157659541, 8.132366197134e-05, -6.018769067655e-05, -1.2515955653e-07, 3.484182972e-08, 4.161492e-11, -6.72643e-12],[-1e-12, 0.12403174500834069, -6.211941063144903, 0.04933903144609126, 0.03810848157720676, 8.132366197134e-05, -6.018769067655e-05, -1.251595565299179e-07, 3.484180435e-08, 4.1614924993407104e-11, -6.72643e-12]]
# asd = [[-9.1016e-13, 0.12403174500837517, -6.211941063143867, 0.04933903144611126, 0.038108481576486226, 8.132366198134e-05, -6.0187690656549995e-05, -1.2515954653e-07, 3.484186161000001e-08, 4.164492000000001e-11, -6.70415e-12],[-9.2016e-13, 0.12403174500860042, -6.211941063144874, 0.049339031446121256, 0.038108481576645405, 8.132366199134001e-05, -6.0187690656549995e-05, -1.2515952652999997e-07, 3.484186161000001e-08, 4.164492000000001e-11, -6.696429999999999e-12],[-8.901600000000001e-13, 0.12403174500858041, -6.211941063143887, 0.049339031446151704, 0.038108481576635406, 8.132366199134001e-05, -6.018769063049999e-05, -1.2515951652991785e-07, 3.4841851610000006e-08, 4.1634920000000006e-11, -6.696429999999999e-12],[-9.2016e-13, 0.1240317450085604, -6.211941063144893, 0.04933903144612944, 0.03810848157653792, 8.132366199134001e-05, -6.018769063049999e-05, -1.2515951652991785e-07, 3.4841849720000005e-08, 4.1634920000000006e-11, -6.70415e-12],[-9.8e-13, 0.12403174500837517, -6.211941063143877, 0.049339031446121256, 0.03810848157653792, 8.132366198134e-05, -6.0187690640499995e-05, -1.2515952652999997e-07, 3.4841851610000006e-08, 4.1634920000000006e-11, -6.70415e-12],[-9.2016e-13, 0.12403174500837517, -6.211941063143867, 0.04933903144612171, 0.03810848157642738, 8.132366199134001e-05, -6.018769064654999e-05, -1.2515954653e-07, 3.484185972000001e-08, 4.1624920000000004e-11, -6.706429999999999e-12],[-9.2016e-13, 0.12403174500859042, -6.211941063143877, 0.04933903144610126, 0.03810848157615883, 8.132366199134001e-05, -6.018769066655e-05, -1.2515951652991785e-07, 3.484186161000001e-08, 4.164492000000001e-11, -6.706429999999999e-12],[-9.001600000000001e-13, 0.12403174500858041, -6.211941063143867, 0.04933903144611126, 0.03810848157653792, 8.132366199134001e-05, -6.0187690640499995e-05, -1.2515954653e-07, 3.4841851610000006e-08, 4.164492000000001e-11, -6.70415e-12],[-9.2863e-13, 0.12403174500834516, -6.211941063143867, 0.049339031446131706, 0.038108481576178826, 8.132366201134001e-05, -6.018769062049999e-05, -1.2515955653e-07, 3.4841851610000006e-08, 4.1634920000000006e-11, -6.70415e-12],[-9.3016e-13, 0.12403174500860042, -6.211941063144893, 0.04933903144612944, 0.03810848157616883, 8.132366201134001e-05, -6.0187690656549995e-05, -1.2515952652991786e-07, 3.4841881610000015e-08, 4.1624920000000004e-11, -6.706429999999999e-12],[-9.3016e-13, 0.12403174500859042, -6.211941063143887, 0.04933903144611944, 0.03810848157615883, 8.132366198134e-05, -6.018769066655e-05, -1.2515952652991786e-07, 3.4841851610000006e-08, 4.1624920000000004e-11, -6.706429999999999e-12],[-9.2016e-13, 0.12403174500837517, -6.211941063143877, 0.04933903144611126, 0.03810848157653792, 8.132366198134e-05, -6.0187690640499995e-05, -1.2515953652999998e-07, 3.4841851610000006e-08, 4.1634920000000006e-11, -6.70415e-12],[-9.1016e-13, 0.12403174500858041, -6.2119410631448835, 0.049339031446151704, 0.03810848157616883, 8.132366200134001e-05, -6.0187690656549995e-05, -1.2515954653e-07, 3.484187161000001e-08, 4.1634920000000006e-11, -6.706429999999999e-12],[-9.1016e-13, 0.12403174500858041, -6.211941063144874, 0.049339031446141705, 0.038108481576178826, 8.132366198134e-05, -6.018769063049999e-05, -1.2515953652991787e-07, 3.4841851610000006e-08, 4.1634920000000006e-11, -6.706429999999999e-12],[-9.1016e-13, 0.1240317450085604, -6.211941063143867, 0.04933903144611126, 0.03810848157641738, 8.132366198134e-05, -6.018769064654999e-05, -1.2515952652991786e-07, 3.4841849720000005e-08, 4.1634920000000006e-11, -6.706429999999999e-12],[-9.3863e-13, 0.12403174500834516, -6.211941063143877, 0.04933903144612171, 0.03810848157616883, 8.132366200134001e-05, -6.018769064654999e-05, -1.2515953652991787e-07, 3.4841851610000006e-08, 4.1634920000000006e-11, -6.70415e-12],[-9.2016e-13, 0.1240317450085604, -6.211941063143897, 0.04933903144610126, 0.03810848157615883, 8.132366198134e-05, -6.018769066655e-05, -1.251595565299179e-07, 3.484182972e-08, 4.1624920000000004e-11, -6.706429999999999e-12],[-9.2016e-13, 0.12403174500835516, -6.211941063143887, 0.04933903144611944, 0.03810848157661541, 8.132366199134001e-05, -6.018769066655e-05, -1.2515954652991788e-07, 3.4841707320000006e-08, 4.1624920000000004e-11, -6.7095299999999996e-12],[-9.3016e-13, 0.1240317450085604, -6.211941063144893, 0.04933903144610171, 0.03810848157660541, 8.132366198134e-05, -6.01876906505e-05, -1.2515955653e-07, 3.4841851610000006e-08, 4.1624920000000004e-11, -6.706429999999999e-12],[-9.2016e-13, 0.1240317450085604, -6.211941063144893, 0.04933903144611944, 0.03810848157653792, 8.132366199134001e-05, -6.0187690640499995e-05, -1.2515955653e-07, 3.484183161e-08, 4.1624920000000004e-11, -6.70415e-12]]

# zxc = [[-1.0566660439395875e-12, 0.134237185607786, -6.211941063144893, 0.04933903144612944, 0.03810848157653792, 8.132366199134001e-05, -6.0187690640499995e-05, -1.2720520719014944e-07, 3.484185972000001e-08, 4.1624920000000004e-11, -6.70415e-12],[-1.110018998522793e-12, 0.134237185607786, -6.211941063144893, 0.04933903144612944, 0.03810848157653792, 8.132366199134001e-05, -6.0187690640499995e-05, -1.2720520719014944e-07, 3.484185972000001e-08, 4.1624920000000004e-11, -6.70415e-12],[-1.0566660439395875e-12, 0.134237185607786, -6.211941063144893, 0.04933903144612944, 0.03810848157653792, 8.132366199134001e-05, -6.0187690640499995e-05, -1.2720520719014944e-07, 3.484185972000001e-08, 4.1624920000000004e-11, -6.70415e-12],[-9.631158341232927e-13, 0.134237185607786, -6.211941063144893, 0.04933903144611944, 0.03926377971436052, 7.968833239057283e-05, -6.0187690640499995e-05, -1.2798023879886888e-07, 3.484185972000001e-08, 4.1624920000000004e-11, -6.70415e-12]]
# ert = [[-1.2258576431841576e-12, 0.18432401538026033, -6.264826223641926, 0.06333337634210713, 0.03810848157653792, 9.273503063172261e-05, -6.018769066655e-05, -1.2515953652991787e-07, 3.484183161e-08, 3.656843380236075e-11, -6.70415e-12],[-1.2258576431841576e-12, 0.18432401538026033, -6.264826223641926, 0.06333337634210713, 0.03810848157653792, 9.273503063172261e-05, -6.018769066655e-05, -1.2515953652991787e-07, 3.484183161e-08, 3.656843380236075e-11, -6.70415e-12],[-1.3219022324924181e-12, 0.22230720993240732, -6.264826223641926, 0.06333337634210713, 0.03810848157653792, 9.224525612536223e-05, -6.018769066655e-05, -1.2515953652991787e-07, 3.484183161e-08, 3.656843380236075e-11, -6.70415e-12],[-1.3219022324924181e-12, 0.18432401538026033, -6.264826223641926, 0.06333337634210713, 0.03810848157653792, 9.273503063172261e-05, -6.018769066655e-05, -1.2515953652991787e-07, 3.484183161e-08, 3.656843380236075e-11, -6.70415e-12],[-1.2967947284086032e-12, 0.2041579195360193, -6.264826223641926, 0.06333337634210713, 0.03810848157653792, 9.273503063172261e-05, -6.018769066655e-05, -1.2515953652991787e-07, 3.484183161e-08, 3.656843380236075e-11, -6.70415e-12],[-1.2717274051841356e-12, 0.2041579195360193, -6.264826223641926, 0.06333337634210713, 0.03810848157653792, 9.273503063172261e-05, -6.018769066655e-05, -1.2515953652991787e-07, 3.484183161e-08, 3.656843380236075e-11, -6.70415e-12],[-1.2258576431841576e-12, 0.18432401538026033, -6.264826223641926, 0.06333337634210713, 0.03810848157653792, 9.273503063172261e-05, -6.018769066655e-05, -1.2515953652991787e-07, 3.484183161e-08, 3.656843380236075e-11, -6.70415e-12],[-1.3219022324924181e-12, 0.14757511208464902, -6.264826223641926, 0.06333337634210713, 0.03810848157653792, 9.273503063172261e-05, -6.018769066655e-05, -1.2515953652991787e-07, 3.484183161e-08, 3.656843380236075e-11, -6.70415e-12],[-1.2717274051841356e-12, 0.2041579195360193, -6.264826223641926, 0.06333337634210713, 0.03810848157653792, 9.273503063172261e-05, -6.018769066655e-05, -1.2515953652991787e-07, 3.484183161e-08, 3.656843380236075e-11, -6.70415e-12],[-1.2717274051841356e-12, 0.18113367424504134, -6.264826223641926, 0.06333337634210713, 0.03810848157653792, 9.273503063172261e-05, -6.018769066655e-05, -1.2515953652991787e-07, 3.484183161e-08, 3.656843380236075e-11, -6.70415e-12],[-1.3219022324924181e-12, 0.1557691318627141, -6.264826223641926, 0.06333337634210713, 0.03810848157653792, 9.273503063172261e-05, -6.018769066655e-05, -1.2515953652991787e-07, 3.484183161e-08, 3.656843380236075e-11, -6.70415e-12],[-1.2717274051841356e-12, 0.2041579195360193, -6.264826223641926, 0.06333337634210713, 0.03810848157653792, 9.273503063172261e-05, -6.018769066655e-05, -1.2515953652991787e-07, 3.484183161e-08, 3.656843380236075e-11, -6.70415e-12],[-1.2258576431841576e-12, 0.16440963165342243, -6.264826223641926, 0.06333337634210713, 0.03810848157653792, 9.273503063172261e-05, -6.018769066655e-05, -1.2515953652991787e-07, 3.484183161e-08, 3.656843380236075e-11, -6.70415e-12],[-1.2258576431841576e-12, 0.18432401538026033, -6.264826223641926, 0.06333337634210713, 0.03810848157653792, 9.273503063172261e-05, -6.018769066655e-05, -1.2515953652991787e-07, 3.484183161e-08, 3.656843380236075e-11, -6.70415e-12],[-1.1884041881092689e-12, 0.16440963165342243, -6.264826223641926, 0.06333337634210713, 0.03810848157653792, 9.273503063172261e-05, -6.018769066655e-05, -1.2515953652991787e-07, 3.484183161e-08, 3.656843380236075e-11, -6.70415e-12],[-1.2717274051841356e-12, 0.14690841769531038, -6.264826223641926, 0.06375036516658925, 0.03810848157653792, 9.273503063172261e-05, -6.018769066655e-05, -1.2515953652991787e-07, 3.484183161e-08, 3.656843380236075e-11, -6.70415e-12],[-1.3001721225622948e-12, 0.16440963165342243, -6.264826223641926, 0.06333337634210713, 0.03810848157653792, 9.273503063172261e-05, -6.018769066655e-05, -1.2515953652991787e-07, 3.484183161e-08, 3.656843380236075e-11, -6.70415e-12],[-1.2258576431841576e-12, 0.18432401538026033, -6.264826223641926, 0.06463540174010828, 0.03810848157653792, 9.273503063172261e-05, -6.018769066655e-05, -1.2515953652991787e-07, 3.484183161e-08, 3.656843380236075e-11, -6.70415e-12],[-1.3630788494289104e-12, 0.16440963165342243, -6.264826223641926, 0.06333337634210713, 0.03810848157653792, 9.273503063172261e-05, -6.018769066655e-05, -1.2515953652991787e-07, 3.484183161e-08, 3.656843380236075e-11, -6.70415e-12],[-1.2258576431841576e-12, 0.14757511208464902, -6.264826223641926, 0.06333337634210713, 0.03810848157653792, 9.273503063172261e-05, -6.018769066655e-05, -1.2515953652991787e-07, 3.484183161e-08, 3.656843380236075e-11, -6.70415e-12]]
# print(len(ert))
# print(len(qwe))
# quit()
overfit = [0.0, 0.1240317450077846, -6.211941063144333, 0.04933903144709126, 0.03810848157715883, 8.132366097133624e-05, -6.018769160916912e-05, -1.251585565299179e-07, 3.484096383229681e-08, 4.1614924993407104e-11, -6.732420176902565e-12]
# arr = [[0.0, 0.1264795618911298, -6.446467789609297, 0.05416873076673235, 0.03844843039136505, 8.446046784391922e-05, -5.999388040307434e-05, -1.2415653359793733e-07, 3.455586485848311e-08, 3.8953734489501946e-11, -6.6387499060899005e-12],
# [0.0, 0.12612822760368578, -6.446467789609297, 0.05416873076673235, 0.03844843039136505, 8.446046784391922e-05, -5.999388040307434e-05, -1.2415653359793733e-07, 3.455586485848311e-08, 3.8953734489501946e-11, -6.6387499060899005e-12],
# [0.0, 0.12559801743342064, -6.430027156230421, 0.05420188252151272, 0.03844843039136505, 8.415792510364831e-05, -5.999388040307434e-05, -1.2415653359793733e-07, 3.455586485848311e-08, 3.8953734489501946e-11, -6.6387499060899005e-12],
# [0.0, 0.1264795618911298, -6.421262293009345, 0.05416873076673235, 0.03844843039136505, 8.446046784391922e-05, -5.999388040307434e-05, -1.2415653359793733e-07, 3.455586485848311e-08, 3.8953734489501946e-11, -6.6387499060899005e-12],
# [0.0, 0.12612822760368578, -6.471445987842753, 0.05416873076673235, 0.03844843039136505, 8.446046784391922e-05, -5.999388040307434e-05, -1.2415653359793733e-07, 3.455586485848311e-08, 3.8953734489501946e-11, -6.6387499060899005e-12],
# [0.0, 0.12559801743342064, -6.446467789609297, 0.05416873076673235, 0.03844843039136505, 8.467215462168631e-05, -5.999388040307434e-05, -1.2415653359793733e-07, 3.455586485848311e-08, 3.8953734489501946e-11, -6.6387499060899005e-12],
# [0.0, 0.12616035228732908, -6.430027156230421, 0.053705927708615354, 0.03844843039136505, 8.446046784391922e-05, -5.999388040307434e-05, -1.2415653359793733e-07, 3.455586485848311e-08, 3.8953734489501946e-11, -6.6387499060899005e-12],
# [0.0, 0.12559801743342064, -6.484079666699487, 0.05416873076673235, 0.03844843039136505, 8.446046784391922e-05, -5.999388040307434e-05, -1.2415653359793733e-07, 3.455586485848311e-08, 3.867289907666504e-11, -6.6387499060899005e-12],
# [0.0, 0.12559801743342064, -6.430027156230421, 0.05420188252151272, 0.03849586814933248, 8.415792510364831e-05, -5.999388040307434e-05, -1.2415653359793733e-07, 3.455586485848311e-08, 3.8953734489501946e-11, -6.6387499060899005e-12],
# [0.0, 0.1264795618911298, -6.446467789609297, 0.05416873076673235, 0.03844843039136505, 8.415792510364831e-05, -5.999388040307434e-05, -1.2486424474018939e-07, 3.455586485848311e-08, 3.8953734489501946e-11, -6.6387499060899005e-12],
# [0.0, 0.1264795618911298, -6.484079666699487, 0.05416873076673235, 0.03844843039136505, 8.446046784391922e-05, -5.999388040307434e-05, -1.2415653359793733e-07, 3.455586485848311e-08, 3.8953734489501946e-11, -6.60158921921083e-12],
# [0.0, 0.1264795618911298, -6.446467789609297, 0.05416873076673235, 0.03844843039136505, 8.446046784391922e-05, -5.999388040307434e-05, -1.2415653359793733e-07, 3.455586485848311e-08, 3.8953734489501946e-11, -6.586592639835782e-12],
# [0.0, 0.12616035228732908, -6.430027156230421, 0.053705927708615354, 0.03844843039136505, 8.477365840582838e-05, -5.971974601584964e-05, -1.2415653359793733e-07, 3.455586485848311e-08, 3.8953734489501946e-11, -6.6387499060899005e-12],
# [0.0, 0.12616035228732908, -6.430027156230421, 0.0547567719409559, 0.03844843039136505, 8.410997007267534e-05, -6.0477936308488645e-05, -1.243960488864828e-07, 3.455586485848311e-08, 3.87533631638698e-11, -6.638115645437453e-12],
# [0.0, 0.12559801743342064, -6.430027156230421, 0.05420188252151272, 0.03844843039136505, 8.415792510364831e-05, -6.050203748447249e-05, -1.2415653359793733e-07, 3.455586485848311e-08, 3.8953734489501946e-11, -6.6387499060899005e-12]]
population = []
# arr = [[0.0, 0.14428304720247861, -6.656775498930148, 0.06590258630359513, 0.03844843039136505, 8.218516953414417e-05, -5.999388040307434e-05, -1.2344573250595505e-07, 3.455586485848311e-08, 3.78783843561829e-11, -6.627664932258919e-12],
# [0.0, 0.14428304720247861, -6.639458297870355, 0.06590258630359513, 0.03844843039136505, 8.197431346474995e-05, -5.999388040307434e-05, -1.2344573250595505e-07, 3.455586485848311e-08, 3.78783843561829e-11, -6.627664932258919e-12],
# [0.0, 0.14428304720247861, -6.656775498930148, 0.06590258630359513, 0.03844843039136505, 8.197431346474995e-05, -5.999388040307434e-05, -1.2344573250595505e-07, 3.455586485848311e-08, 3.792763551759807e-11, -6.627664932258919e-12],
# [0.0, 0.14428304720247861, -6.656775498930148, 0.06590258630359513, 0.03844843039136505, 8.197431346474995e-05, -5.999388040307434e-05, -1.2344573250595505e-07, 3.455586485848311e-08, 3.792763551759807e-11, -6.627664932258919e-12],
# [0.0, 0.14428304720247861, -6.639458297870355, 0.0659127603279358, 0.03844843039136505, 8.197431346474995e-05, -5.999388040307434e-05, -1.2344573250595505e-07, 3.455586485848311e-08, 3.792763551759807e-11, -6.627664932258919e-12],
# [0.0, 0.1440272543510016, -6.639458297870355, 0.06590258630359513, 0.03844843039136505, 8.206404711666514e-05, -5.999388040307434e-05, -1.2344573250595505e-07, 3.455586485848311e-08, 3.792763551759807e-11, -6.627664932258919e-12],
# [0.0, 0.1440272543510016, -6.639458297870355, 0.06590258630359513, 0.03844843039136505, 8.231712110020437e-05, -5.999388040307434e-05, -1.2344573250595505e-07, 3.455586485848311e-08, 3.792763551759807e-11, -6.627664932258919e-12],
# [0.0, 0.14428304720247861, -6.570707127182899, 0.06590258630359513, 0.03844843039136505, 8.197431346474995e-05, -5.999388040307434e-05, -1.2344573250595505e-07, 3.455586485848311e-08, 3.792763551759807e-11, -6.627664932258919e-12],
# [0.0, 0.14428304720247861, -6.656775498930148, 0.06590258630359513, 0.03844843039136505, 8.331655208926607e-05, -5.999388040307434e-05, -1.2344573250595505e-07, 3.455586485848311e-08, 3.792763551759807e-11, -6.627664932258919e-12],
# [0.0, 0.14428304720247861, -6.639458297870355, 0.06590258630359513, 0.03844843039136505, 8.043965566916326e-05, -5.999388040307434e-05, -1.2344573250595505e-07, 3.455586485848311e-08, 3.792763551759807e-11, -6.627664932258919e-12],
# [0.0, 0.1440272543510016, -6.639458297870355, 0.06590258630359513, 0.03844843039136505, 8.197431346474995e-05, -5.999388040307434e-05, -1.2344573250595505e-07, 3.455586485848311e-08, 3.792763551759807e-11, -6.605915606136456e-12],
# [0.0, 0.1440272543510016, -6.639458297870355, 0.06590258630359513, 0.03844843039136505, 8.197431346474995e-05, -5.9619421057524316e-05, -1.2344573250595505e-07, 3.455586485848311e-08, 3.792763551759807e-11, -6.627664932258919e-12],
# [0.0, 0.1440272543510016, -6.639458297870355, 0.06590258630359513, 0.03844843039136505, 8.197431346474995e-05, -5.9586710551817486e-05, -1.2344573250595505e-07, 3.455586485848311e-08, 3.792763551759807e-11, -6.627664932258919e-12],
# [0.0, 0.14428304720247861, -6.639458297870355, 0.06590258630359513, 0.03844843039136505, 8.197431346474995e-05, -6.045877671674691e-05, -1.2344573250595505e-07, 3.455586485848311e-08, 3.792763551759807e-11, -6.627664932258919e-12],
# [0.0, 0.1440272543510016, -6.639458297870355, 0.06590258630359513, 0.03844843039136505, 8.197431346474995e-05, -5.900509205617401e-05, -1.2344573250595505e-07, 3.455586485848311e-08, 3.792763551759807e-11, -6.627664932258919e-12]]
for i in range(15):
	arr = []
	for j in range(11):
		g = overfit[j]
		if g>0:
			arr.append(random.uniform(g-g/5,min(10,g+g/5)))
		else:
			arr.append(random.uniform(max(-10,g/5+g),g-g/5))
	population.append(Individual(arr))
# for i in arr:
	# population.append(Individual(i))
population_size = len(population)

print('population',population_size)

generation = 120
while True:
	# if generation%120==0:
	# 	break
	print("Generation: ",generation)
	generation+=1
	population = sorted(population, key = lambda x:(x.fit_sum))
	for i in population:
		
		print(i.chromo)
		print("\033[92m" + str(i.fitness) + "\033[00m")
		print("\033[93m" + str(i.fit_sum) + "\033[00m")
		print("\033[91m" + str(i.fit_diff) + "\033[00m")
		# if i.fit_sum<1200000 or i.fit_diff<5000:
		# 	submit_status = submit('3a1bPcaPVlB2IaaIobK7p1oDI8GTMwxcXET6VNPD3Rv5UAeaOp', i.chromo)
		# 	assert "submitted" in submit_status
		# 	print(submit_status)
		time.sleep(.5)
	new_generation = []
	s = int((20*population_size)/100)
	new_generation.extend(population[:s])

	s = int((80*population_size)/100)
	for _ in range(s):
		parent1 = random.choice(population[:int(population_size/2)]) 
		parent2 = random.choice(population[:int(population_size/2)]) 
		child = parent1.mate(parent2) 
		new_generation.append(child) 

	population = new_generation 


